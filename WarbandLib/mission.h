#pragma once

#include "fmod.h"
#include "rgl.h"
#include "agent.h"
#include "basics.h"
#include "fading_out_entity.h"
#include "ground.h"
#include "item.h"
#include "missile.h"
#include "mission_grid.h"
#include "mission_object.h"

#define MISSION_NUM_GROUPS 251
#define MISSION_NUM_TEAMS 8
#define MISSION_NUM_AGENT_STATUSES 6

namespace wb
{
	struct mission_weather
	{
		float day_time;
		int manifold_face_no;
		float temperature;
		float humidity;
		float height;
		int unknown_precipitation_value;
		float precipitation_strength;
		int precipitation_type;
		int terrain_type;
		int skybox_no;
		float fog_far;
		float fog_density;
		float u1[2];
	};

	struct mission_entry_point
	{
		rgl::matrix u1;
		rgl::matrix u2;
		rgl::matrix u3;
		rgl::matrix u4;
		int u5[10];
		bool autogenerated;
		rgl::quad *ground_quad;
	};

	struct mission_party_attachment
	{
		int party_nos[128];
	};
	
	struct mission_division
	{
		int leader_agent_no;
		int movement_order;
		int riding_order;
		int weapon_usage_order;
		int hold_fire_order;
		int target_agent_no;
		rgl::vector4 target_position;
		rgl::vector4 target_direction;
		rgl::ai_mesh_face *target_ai_mesh_face;
		rgl::vector4 step_size;
		int num_agents;
		int agent_closeness;
		rgl::vector4 center_position;
		int unknown_division_no;
		int u1;
		bool active_members[4096];
	};
	
	struct mission_group
	{
		int group_no;
		stl::vector<mission_division> divisions;
	};

	struct mission_team
	{
		int team_no;
		int relations[MISSION_NUM_TEAMS];
		slot_manager slots;
	};

	struct mission_team_status
	{
		int agent_statuses[6];
	};

	struct agent_update_rec
	{
		agent_type type;
		agent_control control;
		float frame_time;
		unsigned __int64 time;
		rgl::vector2 speed;
		float movement_dirf;
		rgl::vector4 position;
		float horse_turn_speed;
		unsigned int movement_flags;
		int walk_state;
		rgl::quad *ground_quad;
		rgl::matrix entity_position;
		rgl::vector4 friction;
		rgl::vector4 acceleration;
		rgl::vector4 velocity;
		float tilt;
		float tilt_change;
		int movement_time;
		int action_cooldown_time;
		int channel_0_action_no;
		int channel_0_sequence_no;
		int channel_0_master_flags;
		int channel_1_action_no;
		float channel_1_blend_factor;
		int total_item_weight;
		int rider_agent_no;
		float forward_speed_change;
		int u1;
		float rotation_speed;
		float rotation_damping;
	};

	struct animation_update_rec
	{
		unsigned __int64 frame_time;
		int action_no;
		int action_channel_no;
		int u1;
		int u2;
	};
	
	struct mission
	{
		rgl::scene *mission_scene;
		rgl::stable_vector<agent> agents;
		stl::vector<missile> client_missiles;
		rgl::stable_vector<missile> missiles;
#if defined WARBAND
		stl::vector<int> missiles_attached_mission_object_nos;
		stl::vector<rgl::meta_mesh *> missiles_attached_meta_meshes;
#endif
		int player_agent_no;
		int player_horse_agent_no;
		item start_inventory[NUM_INVENTORY_SLOTS];
		item start_items[NUM_ITEM_SLOTS];
		float zoom_amount;
		int spawn_effector_scene_prop_kinds[MISSION_NUM_TEAMS];
		int spawn_effector_scene_prop_nos[20];
		rgl::timer missile_shoot_timer;
		rgl::timer u1;
		bool player_got_new_agent;
		int u2[387];
		mission_entry_point entry_points[128];
		int cur_meta_mission_seq_no;
		int num_entry_points;
		int num_short_ai_mesh_path_reuses_succeeded;
		int num_short_ai_mesh_path_reuses_failed;
		int num_long_ai_mesh_path_reuses_succeeded;
		int num_long_ai_mesh_path_reuses_failed;
		mission_group groups[251];
		mission_team teams[MISSION_NUM_TEAMS];
		rgl::timer division_update_timer;
		int cur_mission_template_no;
		int cur_site_no;
		int cur_entry_point_no;
		int cheer_at_no_enemy;
		mission_party_attachment mission_party_attachments[2];
		int num_mission_party_attachments[2];
		int main_party_role;
		int enemy_side;
		mission_team_status team_statuses[MISSION_NUM_TEAMS];
		float last_status_change_time;
		rgl::timer start_timer;
		rgl::timer mission_timer_a;
		rgl::timer mission_timer_b;
		rgl::timer mission_timer_c;
		rgl::timer finish_timer;
		bool finished;
		bool multiplayer;
		rgl::timer round_start_timer;
		bool u3;
		int num_interior_meshes;
		rgl::mesh *interior_meshes[32];
		stl::vector<rgl::strategic_entity *> interior_entities;
		ground_paint ground_paint;
		int edit_mode_ground_paint_layer_no;
		int edit_mode_weather_type;
		int edit_mode_mission_object_selected_mesh;
		int battle_advantage;
		int result;
		unsigned int flags;
		rgl::vector2 scene_min;
		rgl::vector2 scene_max;
		rgl::vector2 scene_border_min;
		rgl::vector2 scene_border_max;
		float water_level;
		int frame_no;
		bool is_conversation;
		bool preparing;
		int conversation_troop_nos[16];
		rgl::vector4 player_origin_position;
#if defined WARBAND
		rgl::mesh *water_mesh;
		float wave_rotation;
		rgl::light *sun_light;
		rgl::light *ambient_light;
		int u4;
		rgl::strategic_entity *precipitation_entity;
		rgl::strategic_entity *sun_flare_entity;
		rgl::mesh *sun_flare_mesh;
		void *u5;
		rgl::strategic_entity *edit_mode_cursor_entity;
		rgl::mesh *edit_mode_cursor_mesh;
		rgl::mesh *edit_mode_cursor_vertex_color_mesh;
		rgl::strategic_entity *edit_mode_mouse_over_entity;
		rgl::mesh *edit_mode_mouse_over_mesh;
		rgl::strategic_entity *edit_mode_preview_entity;
		rgl::entity *crosshair_entities[3];
		rgl::entity *damage_arrow_entities[4];
#endif
		mission_weather weather;
		int conversation_troop_no;
		rgl::matrix camera_position;
#if defined WARBAND
		FMOD_CHANNEL *fmod_rain_channel;
#endif
		bool announce_reinforcement_arrival;
		bool announce_enemy_arrival;
		stl::vector<rgl::strategic_entity *> corpses;
		rgl::stable_vector<fading_out_entity> fading_out_entities;
		rgl::stable_vector<mission_object> mission_objects;
		rgl::ai_mesh ai_mesh;
#if defined WARBAND
		rgl::mesh *ai_mesh_faces_mesh;
		rgl::mesh *ai_mesh_vertices_mesh;
		rgl::mesh *ai_mesh_edges_mesh;
		rgl::strategic_entity *ai_mesh_entity;
		rgl::mesh *ai_mesh_plane_mesh;
		rgl::strategic_entity *ai_mesh_plane_entity;
		bool ai_mesh_redraw_meshes[3];
#endif
		int mission_cam_mode;
		rgl::matrix mission_cam_position;
		rgl::matrix mission_cam_position_change_target;
		int mission_cam_action_no;
		float mission_cam_aperture;
		float mission_cam_aperture_change_target;
		float mission_cam_position_and_aperture_change_duration;
		rgl::timer mission_cam_position_and_aperture_change_timer;
		int mission_cam_target_agent_no;
		int mission_cam_target_agent_use_rotation;
		int mission_cam_velocity_type;
		unsigned int mission_cam_screen_color;
		unsigned int mission_cam_screen_color_change_target;
		float mission_cam_screen_color_change_duration;
		rgl::timer mission_cam_screen_color_change_timer;
		float time_speed;
		float time_speed_change_target;
		rgl::timer time_speed_change_timer;
		float time_speed_change_duration;
		bool duel_mode;
		rgl::static_deque<agent_update_rec> agent_update_recs;
		rgl::static_deque<animation_update_rec> animation_update_recs;
#if defined WARBAND
		rgl::string outer_terrain_name;
#endif
		bool entry_points_in_use[128];
		bool use_reptables;
		bool unconditional_use;
		unsigned __int64 frame_time;
		mission_grid grid;
		int keyboard_attack_control;
	};
}
